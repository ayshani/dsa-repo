package com.twopointer;
/*
1332. Remove Palindromic Subsequences

You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic
subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string
without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.



Example 1:

Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.

TC : o(n)
SC: o(n)
 */
public class RemovePalindromicSubsequences {

    public static void main(String[] args) {
        System.out.println(new RemovePalindromicSubsequences().removePalindromeSub("baabb"));
    }
    public int removePalindromeSub(String s) {
        String rev = reverse(s.toCharArray());

        // incase if the string itself is palindrone, then we can delete the whole string in one step
        if(s.equals(rev)){
            return 1;
        }
        // if the string is not palindrome, then we can delete the palindromic subsequence
        // in one step, rest , it ll be one character left, which ll require another step to be deleted.
        // this is possible as we have only two distinct characters : a, b
        return 2;
    }

    private String reverse(char[] s) {
        int low =0, high = s.length-1;

        while(low<high){
            char temp = s[low];
            s[low] = s[high];
            s[high] = temp;
            low++;
            high--;
        }
        return s.toString();
    }
}
